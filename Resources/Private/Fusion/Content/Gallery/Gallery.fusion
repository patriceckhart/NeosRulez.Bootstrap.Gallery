prototype(NeosRulez.Bootstrap:Content.Gallery) {

    usePagination = ${node.properties.pagination ? true : false}
    itemsPerPage = ${node.properties.itemsPerPage}
    identifier = ${node.identifier}

    @context.usePagination = ${this.usePagination}
    @context.itemsPerPage = ${this.itemsPerPage}
    @context.identifier = ${this.identifier}

    page = ${request.arguments.page ? request.arguments.page : '1'}
    begin = ${this.page ? ((String.toInteger(this.page) - 1) * (String.toInteger(this.itemsPerPage))) : false}
    end = ${this.page ? String.toInteger(this.itemsPerPage) * String.toInteger(this.page) : false}

    galleryAssets = ${node.properties.assets ? node.properties.assets : (this.images ? this.images : false)}
    @context.galleryAssets = ${this.galleryAssets}
    assets >
    assets = ${this.usePagination ? (this.galleryAssets ? Array.slice(this.galleryAssets, this.begin, this.end) : false) : this.galleryAssets}

    pagination = NeosRulez.Bootstrap.Gallery:Component.Pagination {
        itemsPerPage = ${String.toInteger(itemsPerPage)}
        paginationIdentifier = ${'pagination_gallery__' + identifier}
        assetsLength = ${galleryAssets ? Array.length(galleryAssets) : false}
        usePagination = ${usePagination}
    }

    renderer {
        content.@process.pagination = ${value + (props.pagination ? props.pagination : '')}
    }

    @cache {
        mode = 'dynamic'
        entryIdentifier {
            node = ${node}
        }
        entryDiscriminator = ${request.arguments.page}
        context {
            1 = 'node'
            2 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
            2 = ${Neos.Caching.nodeTag(documentNode)}
        }
    }
}
